import { exec } from 'child_process';
import { promisify } from 'util';
import { randomBytes } from 'crypto';
import * as path from 'path';
import * as os from 'os';
import * as fs from 'fs/promises';
import { SayFn } from '@slack/bolt';

// We only need the simple execPromise-based command runner
const execPromise = promisify(exec);

async function runCommand(
  command: string,
  options?: { cwd: string },
): Promise<{ stdout: string; stderr: string }> {
  const cwd = options?.cwd || process.cwd();
  console.log(`[${cwd}]> ${command}`);
  try {
    // Increase the maxBuffer size for potentially large AI outputs
    const { stdout, stderr } = await execPromise(command, { ...options, maxBuffer: 1024 * 1024 * 10 }); // 10 MB
    if (stdout) console.log(stdout);
    if (stderr) console.error('STDERR:', stderr);
    return { stdout, stderr };
  } catch (error: any) {
    // --- START OF CHANGES ---
    console.error(`Error executing command: "${command}"`, error);
    // Create a detailed error message including the command's output
    const detailedErrorMessage = `Command failed: ${command}\nSTDOUT: ${error.stdout}\nSTDERR: ${error.stderr}`;
    // Throw this new, more descriptive error
    throw new Error(detailedErrorMessage);
    // --- END OF CHANGES ---
  }
}

export async function runAgentTask(
  prompt: string,
  say: SayFn, // The function to send messages
  threadTs: string, // The ID of the message to reply to
): Promise<string> {
  const repoUrl = process.env.TARGET_REPO_URL;
  if (!repoUrl) {
    throw new Error('TARGET_REPO_URL environment variable is not set.');
  }

  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ai-agent-'));
  console.log(`Created temporary directory: ${tempDir}`);

  try {
    console.log(`Cloning ${repoUrl} into ${tempDir}`);
    await runCommand(`git clone ${repoUrl} .`, { cwd: tempDir });
    await say({ text: '✅ Cloned repository successfully.', thread_ts: threadTs });

    const uniqueId = randomBytes(4).toString('hex');
    const branchName = `ai-agent/${prompt.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '').slice(0, 20)}-${uniqueId}`;
    
    await runCommand(`git checkout -b ${branchName}`, { cwd: tempDir });

    // --- THIS IS THE KEY CHANGE ---
    // We now use the simple, non-interactive command with the -p and -y flags.
    console.log('\n--- Running Qwen AI Agent (Non-Interactive) ---');
    await say({ text: '⏳ Running the AI model... this is the longest step and may take a few minutes.', thread_ts: threadTs });
    await runCommand(`qwen -p "${prompt}" -y`, { cwd: tempDir });
    console.log('--- Qwen AI Agent Finished ---\n');
    await say({ text: '📝 AI has finished. Committing changes and pushing to a new branch...', thread_ts: threadTs });
    // -----------------------------

    const commitMessage = `feat: AI-driven changes for "${prompt.slice(0, 50)}..."`;
    await runCommand('git add .', { cwd: tempDir });

    const statusResult = await runCommand('git status --porcelain', { cwd: tempDir });
    if (!statusResult.stdout.trim()) {
      console.log('The AI made no changes to the code. No commit or PR needed.');
      return `Task complete for prompt: "*${prompt}*". The AI found no changes to make.`;
    }

    await runCommand(`git commit -m "${commitMessage}"`, { cwd: tempDir });
    await runCommand(`git push origin ${branchName}`, { cwd: tempDir });

    await say({ text: '🔗 Creating Pull Request on GitHub...', thread_ts: threadTs });
    const prTitle = `AI Agent: ${prompt}`;
    const prBody = `This PR was automatically generated by the AI agent based on the prompt:\n\n> ${prompt}`;
    const { stdout: prOutput } = await runCommand(
      `gh pr create --title "${prTitle}" --body "${prBody}" --base "main"`,
      { cwd: tempDir },
    );

    const prUrl = prOutput.trim();
    console.log(`✅ Successfully created Pull Request: ${prUrl}`);
    return `✅ Task complete! A pull request has been created: ${prUrl}`;
  } catch (error: any) {
    console.error('An error occurred during agent task:', error.message || error);
    throw new Error(`Agent task failed: ${error.message || 'Unknown error occurred'}.`);
  } finally {
    console.log(`Cleaning up temporary directory: ${tempDir}`);
    await fs.rm(tempDir, { recursive: true, force: true });
  }
}