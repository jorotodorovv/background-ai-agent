import { randomBytes } from 'crypto';
import * as path from 'path';
import * as os from 'os';
import * as fs from 'fs/promises';
import { SayFn } from '@slack/bolt';
import { ai } from './ai-adapter.js';
import { git } from './git.js';

export async function runAgentTask(
  prompt: string,
  say: SayFn,
  threadTs: string,
): Promise<string> {
  const repoUrl = process.env.TARGET_REPO_URL;
  if (!repoUrl) {
    throw new Error('TARGET_REPO_URL environment variable is not set.');
  }

  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ai-agent-'));

  try {
    await git.clone(repoUrl, tempDir);
    await say({ text: '✅ Cloned repository successfully.', thread_ts: threadTs });

    const uniqueId = randomBytes(4).toString('hex');
    const branchName = `ai-agent/${prompt.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '').slice(0, 20)}-${uniqueId}`;
    
    await git.branch(branchName, tempDir);

    await say({ text: '🤔 Generating an implementation plan...', thread_ts: threadTs });
    const plan = await ai.generatePlan(prompt, tempDir, say, threadTs);
    
    await say({ text: '🧠 Plan generated. I will now proceed with the implementation.', thread_ts: threadTs });

    await say({ text: '🏗️ Implementing the plan...', thread_ts: threadTs });
    await ai.executePlan(plan, tempDir, say, threadTs);
    await say({ text: '📝 AI has finished. Committing changes and pushing to a new branch...', thread_ts: threadTs });

    await git.add(tempDir);
    
    const changedFiles = await git.status(tempDir);
    if (!changedFiles) {
      return `Task complete for prompt: "*${prompt}*". The AI found no changes to make.`;
    }

    await say({ text: `📂 Changed files:\n\`\`\`\n${changedFiles}\n\`\`\``, thread_ts: threadTs });

    await say({ text: '📝 Committing changes...', thread_ts: threadTs });
    const commitMessage = `feat: AI-driven changes for ${prompt.slice(0, 50)}...`;
    await git.commit(commitMessage, tempDir);
    
    await say({ text: '🔗 Pushing branch to remote...', thread_ts: threadTs });
    await git.push(branchName, tempDir);

    await say({ text: '🔗 Creating Pull Request on GitHub...', thread_ts: threadTs });

    const prTitle = `AI Agent: ${prompt}`;
    const prBody = `This PR was automatically generated by the AI agent based on the prompt:\n\n> ${prompt}`;
    const prUrl = await git.createPullRequest(prTitle, prBody, 'main', tempDir);

    return `✅ Task complete! A pull request has been created: ${prUrl}`;
  } catch (error: any) {
    throw new Error(`Agent task failed: ${error.message || 'Unknown error occurred'}.`);
  } finally {
    await fs.rm(tempDir, { recursive: true, force: true });
  }
}